module RuboCop
  module AST
    class ProcessedSource
      def initialize: (String source, Float ruby_version, ?path?) -> untyped
      def raw_source: () -> String
      def buffer: () -> Parser::Source::Buffer
      def comments: () -> Array[Parser::Source::Comment]
      attr_reader ast: (Node | nil)
    end

    module NodePattern
      module Macros
        def def_node_matcher: (Symbol, String) -> void
      end
    end

    module Descendence
      def child_nodes: () -> Array[Node]
      def each_node: (*Symbol types) { (Node) -> void } -> void
                   | () -> ::Enumerator[Node, self]
    end

    module Traversal
    end

    module BasicLiteralNode
      def value: () -> untyped
    end

    class Node < Parser::AST::Node
      include Descendence
      def source: () -> (String | nil)
    end

    class ArrayNode < Node
      alias values children
    end

    class DefNode < Node
      def void_context?: () -> bool
      def argument_forwarding?: () -> bool
      def method_name: () -> Symbol
      def arguments: () -> Array[Node]
      def body: () -> Node
      def receiver: () -> (Node | nil)
      def endless?: () -> bool
    end

    class IfNode < Node
      def if?: () -> bool
    end

    class SymbolNode < Node
      include BasicLiteralNode
    end
  end
end
